/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.aula.sb.model.impl;

import com.aula.sb.model.T_Ul_Estudiante;
import com.aula.sb.model.T_Ul_EstudianteModel;
import com.aula.sb.model.T_Ul_EstudianteSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the T_Ul_Estudiante service. Represents a row in the &quot;AulaVirtual_T_Ul_Estudiante&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>T_Ul_EstudianteModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link T_Ul_EstudianteImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see T_Ul_EstudianteImpl
 * @generated
 */
@JSON(strict = true)
public class T_Ul_EstudianteModelImpl
	extends BaseModelImpl<T_Ul_Estudiante> implements T_Ul_EstudianteModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a t_ ul_ estudiante model instance should use the <code>T_Ul_Estudiante</code> interface instead.
	 */
	public static final String TABLE_NAME = "AulaVirtual_T_Ul_Estudiante";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"idEstudiante", Types.BIGINT},
		{"nombreEstudiante", Types.VARCHAR},
		{"correoEstudiante", Types.VARCHAR},
		{"profesEstudiante", Types.VARCHAR}, {"sedeEstudiante", Types.VARCHAR},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("idEstudiante", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nombreEstudiante", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("correoEstudiante", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("profesEstudiante", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sedeEstudiante", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table AulaVirtual_T_Ul_Estudiante (uuid_ VARCHAR(75) null,idEstudiante LONG not null primary key,nombreEstudiante VARCHAR(75) null,correoEstudiante VARCHAR(75) null,profesEstudiante VARCHAR(75) null,sedeEstudiante VARCHAR(75) null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table AulaVirtual_T_Ul_Estudiante";

	public static final String ORDER_BY_JPQL =
		" ORDER BY t_Ul_Estudiante.idEstudiante ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY AulaVirtual_T_Ul_Estudiante.idEstudiante ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NOMBREESTUDIANTE_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long IDESTUDIANTE_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static T_Ul_Estudiante toModel(T_Ul_EstudianteSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		T_Ul_Estudiante model = new T_Ul_EstudianteImpl();

		model.setUuid(soapModel.getUuid());
		model.setIdEstudiante(soapModel.getIdEstudiante());
		model.setNombreEstudiante(soapModel.getNombreEstudiante());
		model.setCorreoEstudiante(soapModel.getCorreoEstudiante());
		model.setProfesEstudiante(soapModel.getProfesEstudiante());
		model.setSedeEstudiante(soapModel.getSedeEstudiante());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<T_Ul_Estudiante> toModels(
		T_Ul_EstudianteSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<T_Ul_Estudiante> models = new ArrayList<T_Ul_Estudiante>(
			soapModels.length);

		for (T_Ul_EstudianteSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public T_Ul_EstudianteModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _idEstudiante;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setIdEstudiante(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _idEstudiante;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return T_Ul_Estudiante.class;
	}

	@Override
	public String getModelClassName() {
		return T_Ul_Estudiante.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<T_Ul_Estudiante, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<T_Ul_Estudiante, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<T_Ul_Estudiante, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((T_Ul_Estudiante)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<T_Ul_Estudiante, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<T_Ul_Estudiante, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(T_Ul_Estudiante)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<T_Ul_Estudiante, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<T_Ul_Estudiante, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<T_Ul_Estudiante, Object>>
		_attributeGetterFunctions;

	static {
		Map<String, Function<T_Ul_Estudiante, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<T_Ul_Estudiante, Object>>();

		attributeGetterFunctions.put("uuid", T_Ul_Estudiante::getUuid);
		attributeGetterFunctions.put(
			"idEstudiante", T_Ul_Estudiante::getIdEstudiante);
		attributeGetterFunctions.put(
			"nombreEstudiante", T_Ul_Estudiante::getNombreEstudiante);
		attributeGetterFunctions.put(
			"correoEstudiante", T_Ul_Estudiante::getCorreoEstudiante);
		attributeGetterFunctions.put(
			"profesEstudiante", T_Ul_Estudiante::getProfesEstudiante);
		attributeGetterFunctions.put(
			"sedeEstudiante", T_Ul_Estudiante::getSedeEstudiante);
		attributeGetterFunctions.put("groupId", T_Ul_Estudiante::getGroupId);
		attributeGetterFunctions.put(
			"companyId", T_Ul_Estudiante::getCompanyId);
		attributeGetterFunctions.put("userId", T_Ul_Estudiante::getUserId);
		attributeGetterFunctions.put("userName", T_Ul_Estudiante::getUserName);
		attributeGetterFunctions.put(
			"createDate", T_Ul_Estudiante::getCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", T_Ul_Estudiante::getModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
	}

	private static final Map<String, BiConsumer<T_Ul_Estudiante, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, BiConsumer<T_Ul_Estudiante, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<T_Ul_Estudiante, ?>>();

		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<T_Ul_Estudiante, String>)T_Ul_Estudiante::setUuid);
		attributeSetterBiConsumers.put(
			"idEstudiante",
			(BiConsumer<T_Ul_Estudiante, Long>)
				T_Ul_Estudiante::setIdEstudiante);
		attributeSetterBiConsumers.put(
			"nombreEstudiante",
			(BiConsumer<T_Ul_Estudiante, String>)
				T_Ul_Estudiante::setNombreEstudiante);
		attributeSetterBiConsumers.put(
			"correoEstudiante",
			(BiConsumer<T_Ul_Estudiante, String>)
				T_Ul_Estudiante::setCorreoEstudiante);
		attributeSetterBiConsumers.put(
			"profesEstudiante",
			(BiConsumer<T_Ul_Estudiante, String>)
				T_Ul_Estudiante::setProfesEstudiante);
		attributeSetterBiConsumers.put(
			"sedeEstudiante",
			(BiConsumer<T_Ul_Estudiante, String>)
				T_Ul_Estudiante::setSedeEstudiante);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<T_Ul_Estudiante, Long>)T_Ul_Estudiante::setGroupId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<T_Ul_Estudiante, Long>)T_Ul_Estudiante::setCompanyId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<T_Ul_Estudiante, Long>)T_Ul_Estudiante::setUserId);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<T_Ul_Estudiante, String>)T_Ul_Estudiante::setUserName);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<T_Ul_Estudiante, Date>)T_Ul_Estudiante::setCreateDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<T_Ul_Estudiante, Date>)
				T_Ul_Estudiante::setModifiedDate);

		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getIdEstudiante() {
		return _idEstudiante;
	}

	@Override
	public void setIdEstudiante(long idEstudiante) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_idEstudiante = idEstudiante;
	}

	@JSON
	@Override
	public String getNombreEstudiante() {
		if (_nombreEstudiante == null) {
			return "";
		}
		else {
			return _nombreEstudiante;
		}
	}

	@Override
	public void setNombreEstudiante(String nombreEstudiante) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nombreEstudiante = nombreEstudiante;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalNombreEstudiante() {
		return getColumnOriginalValue("nombreEstudiante");
	}

	@JSON
	@Override
	public String getCorreoEstudiante() {
		if (_correoEstudiante == null) {
			return "";
		}
		else {
			return _correoEstudiante;
		}
	}

	@Override
	public void setCorreoEstudiante(String correoEstudiante) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_correoEstudiante = correoEstudiante;
	}

	@JSON
	@Override
	public String getProfesEstudiante() {
		if (_profesEstudiante == null) {
			return "";
		}
		else {
			return _profesEstudiante;
		}
	}

	@Override
	public void setProfesEstudiante(String profesEstudiante) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_profesEstudiante = profesEstudiante;
	}

	@JSON
	@Override
	public String getSedeEstudiante() {
		if (_sedeEstudiante == null) {
			return "";
		}
		else {
			return _sedeEstudiante;
		}
	}

	@Override
	public void setSedeEstudiante(String sedeEstudiante) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sedeEstudiante = sedeEstudiante;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(T_Ul_Estudiante.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), T_Ul_Estudiante.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public T_Ul_Estudiante toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, T_Ul_Estudiante>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		T_Ul_EstudianteImpl t_Ul_EstudianteImpl = new T_Ul_EstudianteImpl();

		t_Ul_EstudianteImpl.setUuid(getUuid());
		t_Ul_EstudianteImpl.setIdEstudiante(getIdEstudiante());
		t_Ul_EstudianteImpl.setNombreEstudiante(getNombreEstudiante());
		t_Ul_EstudianteImpl.setCorreoEstudiante(getCorreoEstudiante());
		t_Ul_EstudianteImpl.setProfesEstudiante(getProfesEstudiante());
		t_Ul_EstudianteImpl.setSedeEstudiante(getSedeEstudiante());
		t_Ul_EstudianteImpl.setGroupId(getGroupId());
		t_Ul_EstudianteImpl.setCompanyId(getCompanyId());
		t_Ul_EstudianteImpl.setUserId(getUserId());
		t_Ul_EstudianteImpl.setUserName(getUserName());
		t_Ul_EstudianteImpl.setCreateDate(getCreateDate());
		t_Ul_EstudianteImpl.setModifiedDate(getModifiedDate());

		t_Ul_EstudianteImpl.resetOriginalValues();

		return t_Ul_EstudianteImpl;
	}

	@Override
	public int compareTo(T_Ul_Estudiante t_Ul_Estudiante) {
		int value = 0;

		if (getIdEstudiante() < t_Ul_Estudiante.getIdEstudiante()) {
			value = -1;
		}
		else if (getIdEstudiante() > t_Ul_Estudiante.getIdEstudiante()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof T_Ul_Estudiante)) {
			return false;
		}

		T_Ul_Estudiante t_Ul_Estudiante = (T_Ul_Estudiante)object;

		long primaryKey = t_Ul_Estudiante.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<T_Ul_Estudiante> toCacheModel() {
		T_Ul_EstudianteCacheModel t_Ul_EstudianteCacheModel =
			new T_Ul_EstudianteCacheModel();

		t_Ul_EstudianteCacheModel.uuid = getUuid();

		String uuid = t_Ul_EstudianteCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			t_Ul_EstudianteCacheModel.uuid = null;
		}

		t_Ul_EstudianteCacheModel.idEstudiante = getIdEstudiante();

		t_Ul_EstudianteCacheModel.nombreEstudiante = getNombreEstudiante();

		String nombreEstudiante = t_Ul_EstudianteCacheModel.nombreEstudiante;

		if ((nombreEstudiante != null) && (nombreEstudiante.length() == 0)) {
			t_Ul_EstudianteCacheModel.nombreEstudiante = null;
		}

		t_Ul_EstudianteCacheModel.correoEstudiante = getCorreoEstudiante();

		String correoEstudiante = t_Ul_EstudianteCacheModel.correoEstudiante;

		if ((correoEstudiante != null) && (correoEstudiante.length() == 0)) {
			t_Ul_EstudianteCacheModel.correoEstudiante = null;
		}

		t_Ul_EstudianteCacheModel.profesEstudiante = getProfesEstudiante();

		String profesEstudiante = t_Ul_EstudianteCacheModel.profesEstudiante;

		if ((profesEstudiante != null) && (profesEstudiante.length() == 0)) {
			t_Ul_EstudianteCacheModel.profesEstudiante = null;
		}

		t_Ul_EstudianteCacheModel.sedeEstudiante = getSedeEstudiante();

		String sedeEstudiante = t_Ul_EstudianteCacheModel.sedeEstudiante;

		if ((sedeEstudiante != null) && (sedeEstudiante.length() == 0)) {
			t_Ul_EstudianteCacheModel.sedeEstudiante = null;
		}

		t_Ul_EstudianteCacheModel.groupId = getGroupId();

		t_Ul_EstudianteCacheModel.companyId = getCompanyId();

		t_Ul_EstudianteCacheModel.userId = getUserId();

		t_Ul_EstudianteCacheModel.userName = getUserName();

		String userName = t_Ul_EstudianteCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			t_Ul_EstudianteCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			t_Ul_EstudianteCacheModel.createDate = createDate.getTime();
		}
		else {
			t_Ul_EstudianteCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			t_Ul_EstudianteCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			t_Ul_EstudianteCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return t_Ul_EstudianteCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<T_Ul_Estudiante, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<T_Ul_Estudiante, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<T_Ul_Estudiante, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((T_Ul_Estudiante)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<T_Ul_Estudiante, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<T_Ul_Estudiante, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<T_Ul_Estudiante, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((T_Ul_Estudiante)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, T_Ul_Estudiante>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					T_Ul_Estudiante.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _idEstudiante;
	private String _nombreEstudiante;
	private String _correoEstudiante;
	private String _profesEstudiante;
	private String _sedeEstudiante;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<T_Ul_Estudiante, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((T_Ul_Estudiante)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("idEstudiante", _idEstudiante);
		_columnOriginalValues.put("nombreEstudiante", _nombreEstudiante);
		_columnOriginalValues.put("correoEstudiante", _correoEstudiante);
		_columnOriginalValues.put("profesEstudiante", _profesEstudiante);
		_columnOriginalValues.put("sedeEstudiante", _sedeEstudiante);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("idEstudiante", 2L);

		columnBitmasks.put("nombreEstudiante", 4L);

		columnBitmasks.put("correoEstudiante", 8L);

		columnBitmasks.put("profesEstudiante", 16L);

		columnBitmasks.put("sedeEstudiante", 32L);

		columnBitmasks.put("groupId", 64L);

		columnBitmasks.put("companyId", 128L);

		columnBitmasks.put("userId", 256L);

		columnBitmasks.put("userName", 512L);

		columnBitmasks.put("createDate", 1024L);

		columnBitmasks.put("modifiedDate", 2048L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private T_Ul_Estudiante _escapedModel;

}