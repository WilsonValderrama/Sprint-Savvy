/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.savvy.sb.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.savvy.sb.model.Etiqueta;
import com.savvy.sb.model.EtiquetaModel;
import com.savvy.sb.model.EtiquetaSoap;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Etiqueta service. Represents a row in the &quot;Servicio_Savvy_Etiqueta&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EtiquetaModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EtiquetaImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EtiquetaImpl
 * @generated
 */
@JSON(strict = true)
public class EtiquetaModelImpl
	extends BaseModelImpl<Etiqueta> implements EtiquetaModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a etiqueta model instance should use the <code>Etiqueta</code> interface instead.
	 */
	public static final String TABLE_NAME = "Servicio_Savvy_Etiqueta";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"etiquetaId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"tituloEtiqueta", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("etiquetaId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("tituloEtiqueta", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Servicio_Savvy_Etiqueta (uuid_ VARCHAR(75) null,etiquetaId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,tituloEtiqueta VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table Servicio_Savvy_Etiqueta";

	public static final String ORDER_BY_JPQL =
		" ORDER BY etiqueta.tituloEtiqueta ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Servicio_Savvy_Etiqueta.tituloEtiqueta ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TITULOETIQUETA_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Etiqueta toModel(EtiquetaSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Etiqueta model = new EtiquetaImpl();

		model.setUuid(soapModel.getUuid());
		model.setEtiquetaId(soapModel.getEtiquetaId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setTituloEtiqueta(soapModel.getTituloEtiqueta());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Etiqueta> toModels(EtiquetaSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Etiqueta> models = new ArrayList<Etiqueta>(soapModels.length);

		for (EtiquetaSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public EtiquetaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _etiquetaId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEtiquetaId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _etiquetaId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Etiqueta.class;
	}

	@Override
	public String getModelClassName() {
		return Etiqueta.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Etiqueta, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Etiqueta, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Etiqueta, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Etiqueta)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Etiqueta, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Etiqueta, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Etiqueta)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Etiqueta, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Etiqueta, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Etiqueta, Object>>
		_attributeGetterFunctions;

	static {
		Map<String, Function<Etiqueta, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Etiqueta, Object>>();

		attributeGetterFunctions.put("uuid", Etiqueta::getUuid);
		attributeGetterFunctions.put("etiquetaId", Etiqueta::getEtiquetaId);
		attributeGetterFunctions.put("groupId", Etiqueta::getGroupId);
		attributeGetterFunctions.put("companyId", Etiqueta::getCompanyId);
		attributeGetterFunctions.put("userId", Etiqueta::getUserId);
		attributeGetterFunctions.put("userName", Etiqueta::getUserName);
		attributeGetterFunctions.put("createDate", Etiqueta::getCreateDate);
		attributeGetterFunctions.put("modifiedDate", Etiqueta::getModifiedDate);
		attributeGetterFunctions.put(
			"tituloEtiqueta", Etiqueta::getTituloEtiqueta);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
	}

	private static final Map<String, BiConsumer<Etiqueta, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, BiConsumer<Etiqueta, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Etiqueta, ?>>();

		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Etiqueta, String>)Etiqueta::setUuid);
		attributeSetterBiConsumers.put(
			"etiquetaId", (BiConsumer<Etiqueta, Long>)Etiqueta::setEtiquetaId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Etiqueta, Long>)Etiqueta::setGroupId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Etiqueta, Long>)Etiqueta::setCompanyId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Etiqueta, Long>)Etiqueta::setUserId);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Etiqueta, String>)Etiqueta::setUserName);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Etiqueta, Date>)Etiqueta::setCreateDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Etiqueta, Date>)Etiqueta::setModifiedDate);
		attributeSetterBiConsumers.put(
			"tituloEtiqueta",
			(BiConsumer<Etiqueta, String>)Etiqueta::setTituloEtiqueta);

		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getEtiquetaId() {
		return _etiquetaId;
	}

	@Override
	public void setEtiquetaId(long etiquetaId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_etiquetaId = etiquetaId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getTituloEtiqueta() {
		if (_tituloEtiqueta == null) {
			return "";
		}
		else {
			return _tituloEtiqueta;
		}
	}

	@Override
	public void setTituloEtiqueta(String tituloEtiqueta) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tituloEtiqueta = tituloEtiqueta;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalTituloEtiqueta() {
		return getColumnOriginalValue("tituloEtiqueta");
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Etiqueta.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Etiqueta.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Etiqueta toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Etiqueta>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EtiquetaImpl etiquetaImpl = new EtiquetaImpl();

		etiquetaImpl.setUuid(getUuid());
		etiquetaImpl.setEtiquetaId(getEtiquetaId());
		etiquetaImpl.setGroupId(getGroupId());
		etiquetaImpl.setCompanyId(getCompanyId());
		etiquetaImpl.setUserId(getUserId());
		etiquetaImpl.setUserName(getUserName());
		etiquetaImpl.setCreateDate(getCreateDate());
		etiquetaImpl.setModifiedDate(getModifiedDate());
		etiquetaImpl.setTituloEtiqueta(getTituloEtiqueta());

		etiquetaImpl.resetOriginalValues();

		return etiquetaImpl;
	}

	@Override
	public int compareTo(Etiqueta etiqueta) {
		int value = 0;

		value = getTituloEtiqueta().compareTo(etiqueta.getTituloEtiqueta());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Etiqueta)) {
			return false;
		}

		Etiqueta etiqueta = (Etiqueta)object;

		long primaryKey = etiqueta.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Etiqueta> toCacheModel() {
		EtiquetaCacheModel etiquetaCacheModel = new EtiquetaCacheModel();

		etiquetaCacheModel.uuid = getUuid();

		String uuid = etiquetaCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			etiquetaCacheModel.uuid = null;
		}

		etiquetaCacheModel.etiquetaId = getEtiquetaId();

		etiquetaCacheModel.groupId = getGroupId();

		etiquetaCacheModel.companyId = getCompanyId();

		etiquetaCacheModel.userId = getUserId();

		etiquetaCacheModel.userName = getUserName();

		String userName = etiquetaCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			etiquetaCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			etiquetaCacheModel.createDate = createDate.getTime();
		}
		else {
			etiquetaCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			etiquetaCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			etiquetaCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		etiquetaCacheModel.tituloEtiqueta = getTituloEtiqueta();

		String tituloEtiqueta = etiquetaCacheModel.tituloEtiqueta;

		if ((tituloEtiqueta != null) && (tituloEtiqueta.length() == 0)) {
			etiquetaCacheModel.tituloEtiqueta = null;
		}

		return etiquetaCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Etiqueta, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Etiqueta, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Etiqueta, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Etiqueta)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Etiqueta, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Etiqueta, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Etiqueta, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Etiqueta)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Etiqueta>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Etiqueta.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _etiquetaId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _tituloEtiqueta;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Etiqueta, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Etiqueta)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("etiquetaId", _etiquetaId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("tituloEtiqueta", _tituloEtiqueta);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("etiquetaId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("tituloEtiqueta", 256L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Etiqueta _escapedModel;

}